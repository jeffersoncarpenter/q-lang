At this point, super.hs has the most current stuff.

Disclaimer: The code is in very early stages, hardly tested at all, and there might be big problems looming that will prevent this from ever coming to fruition.

That said, today this code does something that you, dear reader, might find mildly interesting.


The goal is essentially to make it so you're always programming Haskell in a do-notation-like environment.


For example, say you have a function of type String -> Int.  You run it through the super.hs transformation to get a new function.

You pass your new function a String and it will return an Int.  Duh.

You can pass your new function a Maybe String and have it return a Maybe Int.  The fmap function is called automatically.


Say you have a function of type String -> IO String.  You run it through the super.hs transformation to get a new function.

You can pass your new function an IO String directly.  The >>= function is called automatically.

You can pass your new function a [String] and it will return an IO [String].  The mapM function is called automatically.


There are some usability issues.  For example, you have to explicitly give the type signature of the main function in the two tests in super.hs.
